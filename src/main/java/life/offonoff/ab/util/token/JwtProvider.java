package life.offonoff.ab.util.token;

import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import io.jsonwebtoken.security.SignatureException;
import life.offonoff.ab.exception.auth.token.ExpiredTokenException;
import life.offonoff.ab.exception.auth.token.InvalidSignatureTokenException;
import life.offonoff.ab.exception.auth.token.InvalidTokenException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import static java.lang.System.*;

@Slf4j
@Service
public class JwtProvider implements TokenProvider {

    private static final SignatureAlgorithm signAlg = SignatureAlgorithm.HS256;
    private static final String CLAIM_MEMBER_ID = "member-id";
    private final String secretKey;
    private final Long expiresIn;

    private final JwtParser parser;

    public JwtProvider(
            @Value("${ab.auth.token.jwt.secret-key}") String secretKey,
            @Value("${ab.auth.token.jwt.expires-in}") Long expiresIn
    ) {
        this.secretKey = secretKey;
        this.expiresIn = expiresIn;
        this.parser = Jwts.parserBuilder()
                          .setSigningKey(key())
                          .build();
    }

    //== Generate ==//
    @Override
    public String generateToken(Long memberId) {
        return Jwts.builder()
                .setHeader(header())
                .setClaims(payloads(memberId))
                .setExpiration(exp(currentTimeMillis()))
                .signWith(key(), signAlg)
                .compact();
    }

    private Map<String, Object> header() {
        Map<String, Object> header = new HashMap<>();
        header.put("alg", signAlg.getValue());
        header.put("typ", "JWT");

        return header;
    }

    private Map<String, Object> payloads(Long memberId) {
        Map<String, Object> payloads = new HashMap<>();
        payloads.put("member-id", memberId);

        return payloads;
    }

    private Date exp(long currentTime) {
        Date date = new Date();
        date.setTime(currentTime + expiresIn);

        return date;
    }

    private Key key() {
        return Keys.hmacShaKeyFor(secretKey.getBytes());
    }

    //== decode ==//
    @Override
    public Long getMemberIdFrom(String accessToken) {

        Jws<Claims> jws = parseJws(accessToken); // JWT 중 JWS 사용

        return jws.getBody() // Claims
                  .get(CLAIM_MEMBER_ID, Long.class);
    }

    private Jws<Claims> parseJws(String accessToken) {
        // TODO 가독성 개선
        try
        {
            return parser.parseClaimsJws(accessToken);
        }
        catch (SignatureException signatureEx)
        {
            log.error("this Token({}) is not generated by AB", accessToken);
            throw new InvalidSignatureTokenException(signatureEx);
        }
        catch (ExpiredJwtException expiredEx)
        {
            log.error("expired Token({})", accessToken);
            throw new ExpiredTokenException(expiredEx);
        }
        catch (RuntimeException runtimeEx)
        {
            log.error("invalid Token({})", accessToken);
            throw new InvalidTokenException(runtimeEx);
        }
    }
}
